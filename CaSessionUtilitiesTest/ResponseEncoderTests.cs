using System;
using System.Diagnostics;
using CaSessionUtilities;
using CaSessionUtilities.Wrapping;
using CaSessionUtilities.Wrapping.Implementation;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.Utilities.Encoders;

namespace CaSessionUtilitiesTest;

//Early debugging tests
public class ResponseEncoderTests
{



    //New Cases
    [InlineData("","CF1D8F4D1450D3ADE8A44E8F5737E9DDCBE5CD614CE0147185510FD8C35AD12F", "C9C8E169D1FDDBC1A186AB98552A5F5C146D84315F3C8AB8A9DDE6AA5B64105F", 64, "87510132355228C6B16E4A06B8934E4C235067A5D6D3855FBF8B912559E25F4C8F78693425CFFF0AB906C8F1F4DE082EBCD20DD07B13BDDD0B47BA89EDB6C0778F95560EFD66CEE04E35C831442EE9A90FAA42990290008E086618B0A723E0D1769000")]

    [Theory]
    public void EncodeResponse(string _, string ksEncString, string ksMacString, int requestedLength, string expectedWrappedResponse)
    {
        var ksEnc = Hex.Decode(ksEncString);
        var ksMac = Hex.Decode(ksMacString);
        var encoder = new ResponseEncoder(new AesSecureMessagingWrapper(ksEnc, ksMac));
        var result = encoder.Write(Arrays.CopyOf(Hex.Decode(Spec2014Content.DG14Hex), requestedLength));

        Trace.WriteLine("Actual  : " + Hex.ToHexString(result));
        Trace.WriteLine("Expected: " + expectedWrappedResponse.ToLower());

        var encodedActual = Hex.ToHexString(result);

        Assert.StartsWith("87", encodedActual); //Start tag
        var substring = encodedActual.Substring(encodedActual.Length - 32); //9902 + 9000 + 8e0b + 8 bytes (= 16 char) + 9000 again
        Debug.WriteLine($"Mac and block delimiter extract: {substring}");
        Assert.StartsWith("990290008e08", substring); //End of data block, start of MAC
        Assert.EndsWith("9000", substring); //Ends of block

        Assert.Equal(Hex.Decode(expectedWrappedResponse), result);
    }

    //Above examples
    //[InlineData("Original 3", "5E47B10A9FC6805C1E5B600E70B0160F71B3082066206D912806637933303545", 64, "8A7DC86AFB30218A3E97164D8FEE9DB9804F067B7AA0D50790E3A13BB31B1DED90E6243958651637E830961AAD2857F8BCA82286BD8C1F7898DB6FC226EAEB4C682A59EE4776418D0C94EFEC8CC078EE")]
    //[InlineData("Original 4", "0B89852F4866E35BED4BB7B3C271742A7E73F179CEFFEDD1F18A69A59A04251C", 1, "0C1A91577955228ADB5AA0F4FAADF15D")]
    //[InlineData("Original 5", "9DFA50578F1F91EF61B0EA9C02AD7297570DAB7B4EBCAF40FE5F004296B89A73", 15, "0D9B7C00D2767DE181AD9616A528A985")]

    //Original
    //[InlineData("?","CF1D8F4D1450D3ADE8A44E8F5737E9DDCBE5CD614CE0147185510FD8C35AD12F", 64, "32355228C6B16E4A06B8934E4C235067A5D6D3855FBF8B912559E25F4C8F78693425CFFF0AB906C8F1F4DE082EBCD20DD07B13BDDD0B47BA89EDB6C0778F95560EFD66CEE04E35C831442EE9A90FAA42")]

    //New Case6
    [InlineData("New 5", "e61269998c9f22373ad0c3232c1b83e111ac8dbdfbe54901fbf0556b6e66de3e", 64, "513BEFF9CD703AC8D49A083935738ED5C257D72230C6FCDD58760555478F3618EECC3C282E34A6028465CED758040B1A929D02F64AF4DD5036085890960DA9502CEFB6A90B0CE4D70539956BB2053862")]
    [InlineData("New 6", "491d608bd275efded22349fd23a8caf5afb40e73c9f777c8ed138afa940f374d", 63, "09CD04E4E0368850A9F0881449FF6D31A17F3FC58F1A2B37765FB515EDC1C8393A82ECC7BDA506A8FAC89411BD805A46979CFCB7079C01102EA6ED4F215E3869")]
    [InlineData("New 7", "b80c2753e73dab799e08e7708bf9673d872a45c43202a4f8d9dde8e203ec33a3", 1,  "4017BC9CDE322167C6A7ECC1691E8E4C")]
    [InlineData("New 8", "860aa1583594ced261f420011db1d753d65d37d9bab72ee60cfd632b966037f4", 25,  "7EE98D02332EFCC722FF7CC29010F8906810BFD8BDE4936450D6C4C9DCA7AB85")]
    [InlineData("New 9", "2203fdc306ad99b4f3d68427bf46546ec5e877274b2d8947292adb27fb936fc8", 1,   "FB677B0B294C6C9155DB097FFFA2A807")]
    [InlineData("New 10", "119dee6d4b07d9471a8d8884b2370be56836c7aea95dd0b6ad70f954c1fc954d", 17, "2F1E9742BE7C2C914D1005D9417C43D5E5057A0F249225A459437022C44A2188")]
    [InlineData("New 11", "e947b9997e21dcb209d2577c2a215cdbb3d77fab0d3532eb1d883097b0c76cf8", 2,  "46257AADB84BABA96C746255C9B6C53A")]
    [InlineData("New 12", "731c00d0cace4c6b1e80cb34f5e80717ebefe378ce250e1568eca1de4ea6565b", 16, "4054718D87DC4CA4FF0F5312EE75B8B0EF6FEA3047F263FA3FBE068F2C27B205")]
    [InlineData("New 13", "12f98288aaf3494ca3758b5ec14b11b5003de808d66cf7a00889a3121d38ae71", 15, "01F4795CFE0A5BB4046188278C319698")]
    [InlineData("New 14", "4bbc2fca4b120af011f7942362ac527e8687f1475c3ba761d3dfc2774cdf3b2a", 7, "FAB9A48660750DABBACAA435B67455E4")]
    [InlineData("New 15", "c94cb175ac6d78a550fad396cc7c89603de61554c1faca4c6765c0aa4acf79e3", 8, "AD8E710D4CC3691C860011267DFF9DC1")]
    [InlineData("New 16", "37f70a79b5736345a18afa3a0fdd2ff95f689e7a4422dd11115098410fb42f0a", 14, "A181FCB7543008A259CCD82BC52B9DA8")]
    [InlineData("New 17", "ba737089b3bfe4d1b5ca4e3026b4daa260c9c533932263415949b776fe410bd1", 9, "3AFC6E1159A0502CF802F68FDA3CA7B6")]
    [InlineData("New 18", "5ae1146e2c6c9e0c1385bb4af557bb784f89b8ceb49a1514bcefb0c4fa361230", 477, "84C8EA158484A24304D297D028326400B0694DA3A5922E1B83FC81217126E23CAB70AB55C3B94FE185E11B52DADFD6F652FFE33913FC234D3B6AE865A0B60A014AA9F4D895FA1A60CEA647FF440BC31F68E99FB1B6A94D8A33F355695BB2F472094C22E4B01722E2163528E9654D1D7B009B5DE266598F30F2373213D5F0E1614D3F797420F9B7ADDE8156FBD8AB0F7006310770C36600E70DB3A308596841838514A564834E91A98D552BB1476312737F2D48AB4CD367D42DBB89249C48543451180114358F9FFE2CE6F6B9290BBDCC9A634EA46B6C1EB349E2D8CAA7146CA96E5C29A45250C7F7FAB877A74DE9F86609CB1D4A88C3ED781BA55425F3A270BFC1284F238C722DE6CB45BF0C1AEC98961CD1E1B4013646711CE6BF4A1DA96083D851CC36E5ECB762B2A0EC106E3A791F513D276EE7779164949A454AFA93AE7183F2D7D3509359309DC3B35B4CEB1F49B4486E2F65B7AF53C7021A3CCE6130673F5E4E408C4BB3FE9A0B1958090A6E95D0F56200138C39FFC2CB787DFECA24047826971EDEDF066B1B1F397A14F4CCDB384DA0953202A91137302A3827F9F376E1B5EE1B9959A539C26E330B898A537518AFC6D7DBA3CDD1100AEC3C1983ADA92C10554C2949942A45ED5CF433FAA286DB66C6268B166DAE24BF9D4987A73C8B")]
    [Theory]                                                                                                  
    public void ResponseCipherText(string name, string ksEncHex, int length, string expected)
    {
        if (length * 2 > Spec2014Content.DG14Hex.Length)
            throw new InvalidOperationException();

        var wrapper = new AesSecureMessagingWrapper(Hex.Decode(ksEncHex), new byte[0]);
        var result = wrapper.GetEncodedDataForResponse(PaddingIso9797.GetPaddedArrayMethod2(Arrays.CopyOf(Hex.Decode(Spec2014Content.DG14Hex), length), wrapper.BlockSize));
        var resultHex = Hex.ToHexString(result);
        Trace.WriteLine("Actual  : " + resultHex);
        Trace.WriteLine("Expected: " + expected);

        Assert.Equal(expected, resultHex, true);
    }

    //[InlineData("CF1D8F4D1450D3ADE8A44E8F5737E9DDCBE5CD614CE0147185510FD8C35AD12F", "D5C42BAAD967323C0DEE53FA9C7B7B5B")]
    //[Theory]
    //public void GenerateIvFromCounter(string ksEncString, string expectedIvHex)
    //{
    //    var ksEnc = Hex.Decode(ksEncString);
    //    var actual = Hex.ToHexString(Crypto.GetAesEcbNoPaddingCipherText(ksEnc, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 }));

    //    Trace.WriteLine($"Expected: {expectedIvHex}");
    //    Trace.WriteLine($"Actual: {actual}");

    //    Assert.Equal(expectedIvHex, actual, true);
    //}
}