@page "/send"
@using NL.Rijksoverheid.RDW.RDE.CaSessionUtilities
@using Microsoft.AspNetCore.Authorization
@using RdeMessagingDemo.Shared
@using NL.Rijksoverheid.RDW.RDE.CaSessionUtilities.Messaging;
@using NL.Rijksoverheid.RDW.RDE.CaSessionUtilities.Messaging.ZipV2;
@using RdeMessagingDemo.Client.Extras;
@using Org.BouncyCastle.Utilities.Encoders;
@using Newtonsoft.Json
@attribute [Authorize]
@inject HttpClient _HttpClient
@inject NavigationManager _NavManager


<h3>Send</h3>

@if (_Receivers == null || _Receivers.Items.Length == 0)
{
    <p>No receivers. Cannot send.</p>
}
else
{

    <EditForm Model="@_FormSendArgs" OnValidSubmit="@SendMessage">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputSelect id="_Receiver" @bind-Value="_FormSendArgs.Receiver">
            @foreach (var i in _Receivers.Items)
            {
                <option value="@i.Id">@($"{i.EmailAddress}, {i.DisplayName}")</option>
            }
        </InputSelect>
        <InputText id="_Note" @bind-Value="_FormSendArgs.Note" />

        <InputFile id="_Files"  OnChange="@LoadFiles" multiple  />

        <button type="submit">Send</button>
    </EditForm>

}


@code {
    private const long MaxFileSizeBytes = 20 * 1024 * 1024;

    public class FileArgs
    {
        public string Name { get; set; }
        public byte[] Content { get; set; }
    }

    public class FormSendArgs
    {
        public long Receiver { get; set; }
        public string Note { get; set; }
        public List<FileArgs> Files { get; } = new ();
    }

    private ReceiverDocumentList _Receivers;

    private FormSendArgs _FormSendArgs = new();

    protected override async Task OnInitializedAsync()
    {
        _Receivers = await _HttpClient.GetFromJsonAsync<ReceiverDocumentList>("/api/documents/receivers");
    }

    private async Task SendMessage()
    {
        try
        {
            //Get message receiver
            var document = await _HttpClient.GetFromJsonAsync<ReceiverDocument>($"/api/documents/receivers/{_FormSendArgs.Receiver}");

            //TODO view model - barf on doc not found.

            //Use of library - start
            var rdeSessionArgs = new RdeMessageCreateArgs()
                {
                    CaSessionArgs = document.ChipAuthenticationProtocolInfo.ToCaSessionArgs(),
                    FileContent = Base64.Decode(document.FileContentBase64),
                    FileShortId = document.FileId,
                    ReadLength = document.ReadLength,
                };

            var rdeMessageParameters = new CreateRdeMessageParametersCommand().Execute(rdeSessionArgs);
            var secretKey = Crypto.GetAes256SecretKeyFromResponse(rdeMessageParameters.WrappedResponse);

            var messageArgs = new MessageContentArgs()
                {
                    UnencryptedNote = _FormSendArgs.Note ?? string.Empty
                };

            foreach (var i in _FormSendArgs.Files)
                messageArgs.Add(new() { Name = i.Name, Content = i.Content });

            var rdeMessageDecryptionInfo = new RdeMessageDecryptionInfo()
                {
                    CaProtocolOid = document.ChipAuthenticationProtocolInfo.ProtocolOid,
                    DocumentDisplayName = document.DocumentDisplayName,
                    PcdPublicKey = Hex.ToHexString(rdeMessageParameters.EphemeralPublicKey),
                    Command = Hex.ToHexString(rdeMessageParameters.WrappedCommand),
                };

            var message = new ZipMessageEncoder().Encode(messageArgs, rdeMessageDecryptionInfo, secretKey);
            //Use of library - end

            var sendArgs = new MessageSendRequestArgs
                {
                    Receiver = _FormSendArgs.Receiver,
                    MessageBase64 = Base64.ToBase64String(message),
                    Note = messageArgs.UnencryptedNote,
                };

            var result = await _HttpClient.PostAsJsonAsync("/api/messages", sendArgs);

            if (!result.IsSuccessStatusCode)
                _NavManager.NavigateTo("/sendfailed");
            
            _NavManager.NavigateTo("/sent");
        } 
        catch (Exception ex)
        {
            throw;
        }

    }


    //private List<IBrowserFile> loadedFiles = new();
    //private long maxFileSize = 1024 * 15;
    //private int maxAllowedFiles = 3;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //if (isLoading) return;
        //isLoading = true;

        //Lazy version
        _FormSendArgs.Files.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            var f = new FileArgs() { Name = file.Name };
            await using var fs = new MemoryStream();
            try
            {
                await using var s = file.OpenReadStream(MaxFileSizeBytes);
                await s.CopyToAsync(fs);
                f.Content = fs.ToArray();
                _FormSendArgs.Files.Add(f);
            }
            catch(Exception ex)
            {
                throw;
            }
    }
        //isLoading = false;
    }
}
